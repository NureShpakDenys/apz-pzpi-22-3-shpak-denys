Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Катедра програмної інженерії





ЗВІТ
з лабораторної роботи №5
з дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗГОРТАННЯ СИСТЕМИ»




Виконав
ст. гр. ПЗПІ-22-3
Шпак Денис Олександрович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович







Харків 2025
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	23.05.2025	0.1	Створено структуру звіту. Визначено завдання на дану лабораторну роботу.
2	25.05.2025	0.1	Описано хід роботи. Наповнено додатки.

2 ЗАВДАННЯ

Метою даного лабораторного заняття є розгортання та демонстрація розробленої програмної системи.

3 ОПИС ВИКОНАНОЇ РОБОТИ

До виконаної роботи було створено відеозвіт, посилання на який наведено у додатку А.
Було втілено розгортання системи, через верифікацію користувача в глобальній системі. Після чого користувач отримуватиме виконуючий файл інсталятора.
Було втілено функціонал відновленя з резервних копій. В цьому ж функціоналі встановлюються залежності. Там же створюється файл запуску вебклієнта та серверної частини системи.
На глобальній системі було розміщено qr-код, відсканувавши який, можна отримати apk файл для встановлення мобільного клієнта системи.
Наприкінець було продемонстровано працездатність системи.
Усі графічні матеріали наведені у додатку Б.
Деякий код застосунку наведено у додатку В.
ВИСНОВКИ

У результаті виконання даної лабораторної роботи було розгорнуто програмну систему. Продемонстрували працездатність системи після її розгортання.

ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: https://youtu.be/IhmdNe28y9A

Хронологічний опис відеозапису:
00:00 Вітання. Мовець вітається та розповідає мету відеозвіту.
00:17 Розгортання системи. Демонструється розгортання системи на пристрої за допомогою інсталятора.
01:32 Перевірка IoT. Демонструється працездатність IoT пристрою.
01:45 Перевірка вебклієнта. Демонструється працездатність вебклієнта.
02:08 Перевірка серверної частини. Демонструється працездатність серверної частини системи.
02:51 Перевірка мобільного клієнта. Демонструється працездатність мобільного клієнта.
04:33 Висновки. Підбиваються підсумки доповіді.
ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – ER-діаграма даних

 
Рисунок Б.2 – Структура бази даних
 
Рисунок Б.3 – UML-діаграма прецедентів


ДОДАТОК В
Програмний код

В.1 Математична обробка прикладних даних. Дії над матрицями для другої лабораторної роботи.

GitHub репозиторій: https://github.com/NureShpakDenys/apz-pzpi-22-3-shpak-denys/blob/main/Lab2/pzpi-22-3-shpak-denys-lab2/internal/core/domain/utils/math/math.go

  1  // Package math provides mathematical functions for the domain layer.
  2  // This package is used to perform mathematical operations on data.
  3  package math // import "wayra/internal/core/domain/utils/math"
  4  
  5  import "math"
  6  
  7  // Transpose returns the transpose of a matrix.
  8  // matrix: a 2D slice of float64.
  9  // returns: a 2D slice of float64.
 10  func Transpose(matrix [][]float64) [][]float64 {
 11  	rows := len(matrix)
 12  	cols := len(matrix[0])
 13  	result := make([][]float64, cols)
 14  	for i := range result {
 15  		result[i] = make([]float64, rows)
 16  	}
 17  	for i := 0; i < rows; i++ {
 18  		for j := 0; j < cols; j++ {
 19  			result[j][i] = matrix[i][j]
 20  		}
 21  	}
 22  	return result
 23  }
 24  
 25  // MultiplyMatrices returns the product of two matrices.
 26  // a: a 2D slice of float64.
 27  // b: a 2D slice of float64.
 28  // returns: a 2D slice of float64.
 29  func MultiplyMatrices(a, b [][]float64) [][]float64 {
 30  	rowsA := len(a)
 31  	colsA := len(a[0])
 32  	colsB := len(b[0])
 33  	result := make([][]float64, rowsA)
 34  	for i := range result {
 35  		result[i] = make([]float64, colsB)
 36  	}
 37  	for i := 0; i < rowsA; i++ {
 38  		for j := 0; j < colsB; j++ {
 39  			for k := 0; k < colsA; k++ {
 40  				result[i][j] += a[i][k] * b[k][j]
 41  			}
 42  		}
 43  	}
 44  	return result
 45  }
 46  
 47  // Inverse returns the inverse of a matrix.
 48  // matrix: a 2D slice of float64.
 49  // returns: a 2D slice of float64.
 50  func Inverse(matrix [][]float64) [][]float64 {
 51  
 52  	n := len(matrix)
 53  	augmented := make([][]float64, n)
 54  	for i := range augmented {
 55  		augmented[i] = make([]float64, 2*n)
 56  		copy(augmented[i], matrix[i])
 57  		augmented[i][n+i] = 1
 58  	}
 59  
 60  	for i := 0; i < n; i++ {
 61  
 62  		maxRow := i
 63  		for j := i + 1; j < n; j++ {
 64  			if math.Abs(augmented[j][i]) > math.Abs(augmented[maxRow][i]) {
 65  				maxRow = j
 66  			}
 67  		}
 68  
 69  		augmented[i], augmented[maxRow] = augmented[maxRow], augmented[i]
 70  
 71  		pivot := augmented[i][i]
 72  		for j := 0; j < 2*n; j++ {
 73  			augmented[i][j] /= pivot
 74  		}
 75  
 76  		for j := i + 1; j < n; j++ {
 77  			factor := augmented[j][i]
 78  			for k := 0; k < 2*n; k++ {
 79  				augmented[j][k] -= factor * augmented[i][k]
 80  			}
 81  		}
 82  	}
 83  
 84  	for i := n - 1; i >= 0; i-- {
 85  		for j := i - 1; j >= 0; j-- {
 86  			factor := augmented[j][i]
 87  			for k := 0; k < 2*n; k++ {
 88  				augmented[j][k] -= factor * augmented[i][k]
 89  			}
 90  		}
 91  	}
 92  
 93  	inverse := make([][]float64, n)
 94  	for i := range inverse {
 95  		inverse[i] = make([]float64, n)
 96  		copy(inverse[i], augmented[i][n:])
 97  	}
 98  
 99  	return inverse
100  }
101  
102  // HaversineDistance returns the distance between two points on the Earth's surface.
103  // lat1: latitude of the first point.
104  // lon1: longitude of the first point.
105  // lat2: latitude of the second point.
106  // lon2: longitude of the second point.
107  // returns: a float64 - the distance between the two points.
108  func HaversineDistance(lat1, lon1, lat2, lon2 float64) float64 {
109  	const R = 6371
110  	lat1Rad := lat1 * math.Pi / 180
111  	lon1Rad := lon1 * math.Pi / 180
112  	lat2Rad := lat2 * math.Pi / 180
113  	lon2Rad := lon2 * math.Pi / 180
114  	dLat := lat2Rad - lat1Rad
115  	dLon := lon2Rad - lon1Rad
116  
117  	a := math.Sin(dLat/2)*math.Sin(dLat/2) + math.Cos(lat1Rad)*math.Cos(lat2Rad)*math.Sin(dLon/2)*math.Sin(dLon/2)
118  	c := 2 * math.Atan2(math.Sqrt(a), math.Sqrt(1-a))
119  
120  	return R * c
121  }
122  
123  // Mean returns the mean of a slice of float64.
124  // data: a slice of float64.
125  // returns: a float64 - the mean of the data.
126  func Mean(data []float64) float64 {
127  	sum := 0.0
128  	for _, value := range data {
129  		sum += value
130  	}
131  	return sum / float64(len(data))
132  }
133  
134  // StdDev returns the standard deviation of a slice of float64.
135  // data: a slice of float64.
136  // returns: a float64 - the standard deviation of the data.
137  func StdDev(data []float64) float64 {
138  	mean := Mean(data)
139  	sumSquares := 0.0
140  	for _, value := range data {
141  		diff := value - mean
142  		sumSquares += diff * diff
143  	}
144  	variance := sumSquares / float64(len(data))
145  	return math.Sqrt(variance)
146  }
147  
148  // Square returns the square of each element in a slice of float64.
149  // data: a slice of float64.
150  // returns: a slice of float64.
151  func Square(data []float64) []float64 {
152  	result := make([]float64, len(data))
153  	for i, value := range data {
154  		result[i] = value * value
155  	}
156  	return result
157  }
158  
159  // Multiply returns the element-wise product of two slices of float64.
160  // a: a slice of float64.
161  // b: a slice of float64.
162  // returns: a slice of float64.
163  func Multiply(a, b []float64) []float64 {
164  	result := make([]float64, len(a))
165  	for i := range result {
166  		result[i] = a[i] * b[i]
167  	}
168  	return result
169  }
170  
171  // Sum returns the sum of a slice of float64.
172  // data: a slice of float64.
173  // returns: a float64 - the sum of the data.
174  func Sum(data []float64) float64 {
175  	sum := 0.0
176  	for _, value := range data {
177  		sum += value
178  	}
179  	return sum
180  }

В.2 Адміністрування бізнес-логіки системи. Панель завантаження інсталятору для системного адміністратора.

GitHub репозиторій: https://github.com/NureShpakDenys/apz-pzpi-22-3-shpak-denys/blob/main/Lab5/pzpi-22-3-shpak-denys-lab5/global-app/wayra-company/src/InstallerPanel.js

  1  import React, { useState } from "react";
  2  import QRCode from "react-qr-code";
  3  
  4  export default function InstallerPanel() {
  5    const [tab, setTab] = useState("exe");
  6    const [username, setUsername] = useState("");
  7    const [password, setPassword] = useState("");
  8    const [error, setError] = useState("");
  9  
 10    const handleDownloadExe = async () => {
 11      setError("");
 12  
 13      if (!username || !password) {
 14        setError("Please enter both username and password.");
 15        return;
 16      }
 17  
 18      try {
 19        const response = await fetch("http://localhost:8080/get-creds", {
 20          method: "POST",
 21          headers: {
 22            "Content-Type": "application/json"
 23          },
 24          body: JSON.stringify({ username, password })
 25        });
 26  
 27        if (response.ok) {
 28          const link = document.createElement("a");
 29          link.href = "/main.exe";
 30          link.download = "main.exe";
 31          document.body.appendChild(link);
 32          link.click();
 33          document.body.removeChild(link);
 34        } else {
 35          setError("Invalid credentials. Access denied.");
 36        }
 37      } catch (err) {
 38        setError("Server error. Please try again later.");
 39      }
 40    };
 41  
 42    return (
 43      <div className="min-h-screen bg-gray-50">
 44        <header className="bg-white shadow">
 45          <div className="max-w-6xl mx-auto px-4 py-3 flex justify-between items-center">
 46            <h1 className="text-2xl font-bold text-blue-700">Wayra company</h1>
 47            <nav className="space-x-4">
 48              <button
 49                className={`py-2 px-4 rounded-md font-medium ${
 50                  tab === "exe"
 51                    ? "bg-blue-600 text-white"
 52                    : "text-blue-600 hover:bg-blue-100"
 53                }`}
 54                onClick={() => setTab("exe")}
 55              >
 56                EXE Installer
 57              </button>
 58              <button
 59                className={`py-2 px-4 rounded-md font-medium ${
 60                  tab === "apk"
 61                    ? "bg-blue-600 text-white"
 62                    : "text-blue-600 hover:bg-blue-100"
 63                }`}
 64                onClick={() => setTab("apk")}
 65              >
 66                APK Installer
 67              </button>
 68            </nav>
 69          </div>
 70        </header>
 71  
 72        <div className="max-w-md mx-auto mt-10 bg-white shadow-md rounded-xl p-7">
 73          {tab === "exe" && (
 74            <>
 75              <h2 className="text-xl font-semibold mb-4 text-center">
 76                Windows Installer Access
 77              </h2>
 78              <div className="space-y-4">
 79                <input
 80                  type="text"
 81                  placeholder="Username"
 82                  className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
 83                  value={username}
 84                  onChange={(e) => setUsername(e.target.value)}
 85                />
 86                <input
 87                  type="password"
 88                  placeholder="Password"
 89                  className="w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
 90                  value={password}
 91                  onChange={(e) => setPassword(e.target.value)}
 92                />
 93                {error && <p className="text-red-500 text-sm">{error}</p>}
 94                <button
 95                  onClick={handleDownloadExe}
 96                  className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition"
 97                >
 98                  Download Installer (.exe)
 99                </button>
100              </div>
101            </>
102          )}
103  
104          {tab === "apk" && (
105            <div className="flex flex-col items-center">
106              <h2 className="text-xl font-semibold mb-4 text-center">
107                Mobile APK Installer
108              </h2>
109              <QRCode value="http://192.168.1.102:8080/get-apk" />
110              <p className="mt-4 text-sm text-gray-600">
111                Scan to download APK file for Android
112              </p>
113            </div>
114          )}
115        </div>
116      </div>
117    );
118  }

В.3 Резервне копіювання користувацьких даних.

GitHub репозиторій: https://github.com/NureShpakDenys/apz-pzpi-22-3-shpak-denys/blob/main/Lab5/pzpi-22-3-shpak-denys-lab5/installer/core/backup.py

 1  import os
 2  import shutil
 3  import subprocess
 4  import tempfile
 5  from cryptography.hazmat.primitives.ciphers.aead import AESGCM
 6  from pathlib import Path
 7  
 8  backup_tables = [
 9      "roles", "users", "companies", "routes", "deliveries",
10      "product_categories", "products", "waypoints", "sensor_data", "user_companies"
11  ]
12  
13  def decrypt_file_to(source_path, dest_path, key: bytes):
14      with open(source_path, "rb") as f:
15          data = f.read()
16  
17      nonce_size = 12
18      nonce = data[:nonce_size]
19      ciphertext = data[nonce_size:]
20  
21      aesgcm = AESGCM(key)
22      plaintext = aesgcm.decrypt(nonce, ciphertext, None)
23  
24      with open(dest_path, "wb") as f:
25          f.write(plaintext)
26  
27  def restore_database(backup_dir: str, db_user: str, db_name: str, db_password: str, encryption_key: str):
28      temp_dir = tempfile.mkdtemp()
29      os.environ["PGPASSWORD"] = db_password
30  
31      try:
32          for table in backup_tables:
33              encrypted = os.path.join(backup_dir, f"{table}.csv")
34              decrypted = os.path.join(temp_dir, f"{table}.csv")
35  
36              decrypt_file_to(encrypted, decrypted, bytes(encryption_key, encoding="utf-8"))
37  
38              truncate_cmd = [
39                  "psql", "-U", db_user, "-d", db_name, "-h", "localhost", "-p", "5432",
40                  "-c", f'TRUNCATE TABLE {table} RESTART IDENTITY CASCADE;'
41              ]
42              subprocess.run(truncate_cmd, check=True)
43              import_cmd = [
44                  "psql", "-U", db_user, "-d", db_name, "-h", "localhost", "-p", "5432",
45                  "-c", f"\\COPY {table} FROM '{decrypted}' WITH CSV HEADER"
46              ]
47              subprocess.run(import_cmd, check=True)
48      finally:
49          shutil.rmtree(temp_dir)
50          del os.environ["PGPASSWORD"]

