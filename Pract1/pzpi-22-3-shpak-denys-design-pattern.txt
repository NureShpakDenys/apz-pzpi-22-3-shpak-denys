Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Катедра програмної інженерії






ЗВІТ
з практичного заняття №1
з дисципліни  «Архітектура програмного забезпечення»
на тему: «Патерни проєктування»






Виконав
ст. гр. ПЗПІ-22-3
Шпак Денис Олександрович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович




Харків 2025
ІСТОРІЯ ЗМІН
 
№	Дата	Версія звіту	Опис змін та виправлень
1	03.03.2025	0.1	Створено структуру звіту
2	05.03.2025	0.1	Описано пункт «Завдання»
3	06.03.2025	0.1	Описано принципи роботи патерну Фасад, його переваги, практичні приклади та недоліки.

1 ЗАВДАННЯ

Дослідити програмний патерн Фасад, його призначення, структуру, особливості реалізації та практичне застосування в об'єктно-орієнтованому програмуванні. Продемонструвати принципи роботи патерну на конкретних прикладах програмного коду для унаочнення його застосування в розробці програмного забезпечення.

2 ОПИС ВИКОНАНОЇ РОБОТИ

Сучасне програмне забезпечення має високу складність і багаторівневу архітектуру, що створює додаткові труднощі у процесі управління взаємодією між компонентами системи. Однією з основних проблем є інтеграція підсистем різних рівнів абстракції. У цьому контексті важливим інструментом є використання патернів проектування, які забезпечують масштабованість, підтримуваність і розширюваність програмних рішень. Одним із найбільш ефективних підходів для зниження складності є паттерн Фасад, що належить до структурних патернів проектування.
Розробка складних програмних систем супроводжується рядом проблем, що впливають на якість кінцевого продукту. Однією з основних є висока зв'язність компонентів, коли надмірна залежність між різними частинами системи ускладнює внесення змін та поширює помилки з однієї частини на інші. Крім того, складність інтерфейсів підсистем є серйозною проблемою, оскільки пряме взаємодія клієнтського коду з великою кількістю класів підсистеми призводить до надмірної складності та збільшує ймовірність помилок. Відсутність уніфікованого доступу до функціональності підсистеми зазвичай призводить до дублювання коду, що негативно впливає на ефективність розробки та подальшу підтримку системи. Важливим аспектом є порушення принципу інкапсуляції, оскільки неструктурована взаємодія з підсистемами часто призводить до порушення їхньої внутрішньої організації, що ускладнює підтримку і розвиток системи. Складність інтеграції з іншими системами може виникнути через відсутність чітко визначеного інтерфейсу, що знижує ефективність взаємодії між підсистемами.
Паттерн Фасад допомагає вирішити ці проблеми, створюючи уніфікований інтерфейс для набору інтерфейсів підсистеми, що спрощує її використання. Згідно з класичним визначенням, Фасад є структурним паттерном проектування, який забезпечує простий інтерфейс для взаємодії зі складною системою класів, бібліотек або фреймворків.
Основні риси паттерну Фасад включають спрощення інтерфейсу, приховання складності підсистеми та централізацію логіки взаємодії. Завдяки цьому Фасад знижує зв'язаність між клієнтським кодом і підсистемами, оскільки клієнт взаємодіє лише з Фасадом, не потребуючи доступу до внутрішньої реалізації. Крім того, Фасад дозволяє зберегти інкапсуляцію, приховуючи внутрішню структуру підсистеми і таким чином забезпечуючи гнучкість і захищеність від змін. Водночас, Фасад встановлює стандартизований спосіб взаємодії з підсистемами, що сприяє уніфікації процесів.
Застосування паттерну Фасад доцільне у кількох випадках, зокрема для складних систем з великою кількістю компонентів та взаємодіючих класів. Фасад також є корисним у шаруватих архітектурах, де його можна застосовувати для організації взаємодії між різними рівнями архітектури. Застосування цього паттерну є ефективним при інтеграції з зовнішніми API та бібліотеками, оскільки він дозволяє створити спрощений інтерфейс для взаємодії з іншими системами. Крім того, Фасад може бути використаний під час рефакторингу застарілих систем, оскільки він дає змогу інкапсулювати складну логіку без переписування коду. Використання Фасаду також полегшує інтеграцію різних підсистем у складних системах.
В якості практичних прикладів застосування паттерну Фасад можна розглянути кілька випадків. Перший приклад стосується відправлення сповіщень через різні канали, кожен з яких має свою специфічну логіку та вимоги до форматування даних. У цьому випадку клас NotificationFacade надає простий інтерфейс для відправлення сповіщень через різні канали, приховуючи складність взаємодії з кожною підсистемою. Другий приклад ілюструє застосування Фасаду в контексті платіжних систем, таких як Stripe, PayPal та ApplePay, де клас PaymentFacade об'єднує інтерфейси різних платіжних систем в єдиний інтерфейс, спрощуючи інтеграцію. Третій приклад стосується роботи з різними типами сховищ даних. Клас StorageFacade надає уніфікований інтерфейс для взаємодії з різними типами сховищ, абстрагуючи клієнтський код від деталей реалізації.
Переваги паттерну Фасад включають зниження складності, зменшення зв'язаності між компонентами, поліпшення інкапсуляції та стандартизацію інтерфейсів. Використання Фасаду дозволяє підвищити читабельність коду, полегшує тестування та рефакторинг. Крім того, зміни в підсистемах не впливають на клієнтський код, якщо інтерфейс Фасаду залишається незмінним.
Однак існують також недоліки застосування паттерну Фасад. Введення додаткового рівня абстракції може бути надмірним для простих систем. Існує також ризик утворення "божественного об'єкта", коли Фасад стає надмірно складним і порушує принцип єдиної відповідальності. Використання Фасаду може обмежити гнучкість системи, оскільки клієнтський код буде обмежений лише тими функціями, які надаються через Фасад. Крім того, з часом Фасад може стати надмірно громіздким, що ускладнює його використання.
Застосування паттерну Фасад є недоцільним у простих системах з обмеженою кількістю компонентів і прямолінійною логікою взаємодії, а також коли клієнтам потрібен прямий доступ до функціональності підсистеми для забезпечення гнучкості. Якщо підсистема використовується лише в одному місці, застосування Фасаду може бути надмірним. У випадках, коли Фасад створює непотрібні об'єкти або викликає методи, що не використовуються, це може вплинути на ефективність системи.
У загальному контексті, паттерн Фасад є потужним інструментом для зменшення складності взаємодії з підсистемами та підвищення якості коду. Він дозволяє створювати масштабовані та підтримувані системи, однак його застосування повинно бути обґрунтованим залежно від специфіки проекту.

ВИСНОВКИ


ДОДАТОК А
Посилання на відеозапис доповіді

ДОДАТОК Б
Слайди презентації доповіді

ДОДАТОК В
Приклади програмного коду

