Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Катедра програмної інженерії






ЗВІТ
з практичного заняття №2
з дисципліни  «Архітектура програмного забезпечення»
на тему: «Архітектура відомих програмних систем»






Виконав
ст. гр. ПЗПІ-22-3
Шпак Денис Олександрович

Перевірив
ст. викладач катедри ПІ
Сокорчук Ігор Петрович




Харків 2025
ІСТОРІЯ ЗМІН
 
№	Дата	Версія звіту	Опис змін та виправлень
1	27.03.2025	0.1	Сформульовано завдання на практичну роботу.
2	28.03.2025	0.1	Описано виконану роботу. Наведено посилання на відео у додатку А. Додаток Б наповнено слайдами презентації.

1 ЗАВДАННЯ

Завданням на дане практичне завдання  можна вважати дослідження архітектури однієї з відомих складних програмних систем. Зокрема було обрано платформу Twitch, а отже слід дослідити саме її архітектуру.

2 ОПИС ВИКОНАНОЇ РОБОТИ

Було сформовано доповідь. Її розказано з супроводом у вигляді презентації у відео, посилання на яке розміщено в додатку А. Слайди презентації наведено в додатку Б.
Архітектура програмної системи Twitch є складним багатошаровим утворенням, яке поєднує сучасні технології для забезпечення високої продуктивності, стійкості до навантажень та безперебійної роботи. Основним завданням архітектури є ефективне керування відеопотоками в реальному часі, що вимагає інтеграції потужних обчислювальних потужностей, розподіленої інфраструктури та алгоритмів оптимізації потокового мовлення. Оскільки Twitch є платформою глобального рівня, її архітектурні рішення мають забезпечувати ефективний розподіл мережевого трафіку та мінімізувати затримки під час трансляцій. Крім того, важливим аспектом функціонування платформи є інтеграція з іншими сервісами, такими як соціальні мережі, рекламні платформи та системи аналітики, що вимагає гнучкості в архітектурних рішеннях.
Фундаментальні вимоги до архітектури Twitch формуються з урахуванням основних викликів, пов’язаних із потоковим мовленням та високою навантаженістю серверної інфраструктури. Платформа повинна підтримувати низькі затримки передачі відео, стабільність функціонування навіть при різких коливаннях кількості користувачів та гнучкість у впровадженні оновлень. Ці вимоги реалізуються за допомогою масштабованої інфраструктури, що дозволяє динамічно адаптувати ресурси під змінні навантаження. Надійність роботи Twitch забезпечується розподіленою системою серверів, яка гарантує безперервний доступ до трансляцій навіть у випадку часткових відмов обладнання. Окремо розглядаються питання оптимізації використання обчислювальних ресурсів, що включає алгоритми передбачення навантажень та автоматичну балансировку трафіку.
Структурна організація архітектури Twitch ґрунтується на кількох ключових рівнях, що взаємодіють між собою для забезпечення повного циклу обробки відеопотоків. Основу становить система обробки відео, що виконує завдання кодування, транскодування та потокової доставки контенту. Вхідний відеопотік, який передається від стрімерів, проходить через процес адаптації до різних форматів відтворення, що дозволяє забезпечити сумісність з різними пристроями та швидкістю інтернет-з’єднання користувачів.
Додатково використовується розподілена мережа доставки контенту (CDN), яка оптимізує передачу відео шляхом розташування серверів у географічній близькості до глядачів. Ця стратегія мінімізує затримки та знижує навантаження на центральні вузли інфраструктури. Важливу роль відіграє також система управління метаданими, що дозволяє зберігати, індексувати та аналізувати інформацію про відеопотоки, їх перегляд та взаємодію користувачів.
Компонентна архітектура включає фронтенд та бекенд модулі, бази даних для управління користувацькими даними, систему управління потоками та аналітичні модулі. Фронтенд виконує функції взаємодії з користувачами, забезпечуючи доступ до трансляцій, перегляд відео та інтерактивні елементи, такі як чати та донати. Бекенд містить мікросервісну систему обробки запитів, що дозволяє забезпечити гнучкість у масштабуванні платформи та ефективне керування сервісами.
 Бази даних використовуються для збереження інформації про користувачів, історію трансляцій та налаштування персоналізованого контенту. Окремо функціонує система модерації, що включає алгоритми машинного навчання для автоматичного розпізнавання порушень політики платформи. Крім того, впроваджено систему керування правами доступу та монетизації, що дозволяє реалізовувати складні бізнес-логіки взаємодії між стрімерами, рекламодавцями та глядачами.
Технологічна основа Twitch включає сучасні інструменти для забезпечення стабільної роботи системи. Розробка серверної частини здійснюється з використанням мов програмування Java, Python, Go та JavaScript. Для ефективного кодування відеопотоків застосовуються технології HLS (HTTP Live Streaming) та WebRTC, що забезпечують адаптивну трансляцію відео з мінімальними втратами якості. Інфраструктура хмарних обчислень базується на Amazon Web Services (AWS), що дозволяє масштабувати обчислювальні ресурси залежно від поточного навантаження. Для зберігання даних використовуються PostgreSQL, Redis та DynamoDB, що забезпечують швидкий доступ до критично важливої інформації. Значну увагу приділено питанням безпеки даних та захисту від несанкціонованого доступу, що реалізується через механізми шифрування, автентифікації та моніторингу загроз.
Надійність та масштабованість Twitch реалізуються завдяки інтеграції балансувальників навантаження, які рівномірно розподіляють запити між серверами, уникаючи перевантаження окремих вузлів. Горизонтальне масштабування дозволяє автоматично додавати нові обчислювальні ресурси при зростанні кількості користувачів, що гарантує стабільну роботу під час пікових навантажень. Впровадження резервування серверних компонентів та автоматизованих механізмів відновлення даних забезпечує безперебійну роботу сервісу навіть у випадку критичних збоїв інфраструктури. Додатково передбачено інтеграцію механізмів моніторингу та автоматичного виправлення помилок для мінімізації простоїв.
Машинне навчання відіграє центральну роль у процесах персоналізації контенту та оптимізації користувацького досвіду. Алгоритми аналізують поведінкові патерни користувачів, історію переглядів та рівень залучення для формування персоналізованих рекомендацій. Додатково штучний інтелект застосовується для автоматичної модерації контенту, ідентифікації шкідливих матеріалів та протидії порушенням політики платформи. Використання передових технологій машинного навчання дозволяє значно підвищити ефективність обробки великих обсягів даних та вдосконалити механізми адаптації контенту під потреби користувачів. Додатково досліджується впровадження генеративних моделей для створення автоматизованого контенту, що може розширити функціонал платформи.
Таким чином, архітектура Twitch є складною, багаторівневою системою, що поєднує передові технології та алгоритми для забезпечення високої продуктивності та масштабованості. Використання гнучкої мікросервісної архітектури, розподіленої мережі доставки контенту, машинного навчання та автоматизованих процесів оновлення дозволяє платформі ефективно функціонувати в умовах глобального ринку та постійно вдосконалювати взаємодію з користувачами. Подальший розвиток Twitch зосереджений на інтеграції новітніх технологій для оптимізації роботи сервісу, покращення якості трансляцій та підвищення рівня залучення аудиторії.

ВИСНОВКИ

У результаті виконання даної практичної роботи було архітектуру програмної системи Twitch. Зазначено на проблемах, що вона вирішує а також на компонентах, які включає у себе.

ДОДАТОК А
Посилання на відеозапис доповіді

Відеозапис доповіді на YouTube: https://youtu.be/lKjE831n_pw
Нижче наведено хронологічний опис доповіді.
00:00 Вітання. Проголошується доповідач та тема доповіді.
00:13 Зміст. Перелічуються питання, що будуть розглянуті у ході доповіді.
00:40 Вступ. Описується проблематика доповіді.
01:48 Загальна структура Twitch. У загальному розповідається про Twitch, та яке завдання стоїть перед його архітектурою.
02:46 Вимоги до архітектури. Описується перелік вимог, що треба задовільнити для архітектури системи, що рорзглядається.
03:48 Система обробки відео. Описується процес обробки потокових даних від користувача, що веде трансляцію, до глядача.
04:29 Розподілена мережа доставки контенту. Описується оптимізація відео.
05:07 Фронтенд та бекенд. Описується призначення модулів фронтенда та бекенда.
05:40 Бази даних та аналітичні системи. Продовження опису модулів архітектури програмної системи.
06:15 Технологічна основа. Розглядаються технології використані для написання програмної системи.
07:21 Масшатабованість та резервування. Описуються такі питання як розподіл запитів між серверами, розподіл ресурсів, питання резервування, механізми мінімізації простоїв.
08:11 Виклики та майбутні перспективи. Описуються виклики програмної системи та доцільність використання машинного навчання для персоналізації або модерації контента.
09:08 Висновки. Підбиваються підсумки доповіді.
ДОДАТОК Б
Слайди презентації доповіді

 
Рисунок Б.1 – Титульний слайд презентації

 
Рисунок Б.2 – Зміст доповіді

 
Рисунок Б.3 – Вступна частина. Проблематика

 
Рисунок Б.4 – Загальний опис архітектури Twitch

 
Рисунок Б.5 – Вимоги до архітектури Twitch

 
Рисунок Б.6 – Системи обробки відео, що використовуються у Twitch


 
Рисунок Б.7 – Мережа доставки контенту у Twitch

 
Рисунок Б.8 – Серверна та клієнтська частини Twitch

 
Рисунок Б.9 – Бази даних та аналітичні системи, що застосовуються у Twitch

 
Рисунок Б.10 – Технології, що використовуються у системі

 
Рисунок Б.11 – Масштабованість архітектури

 
Рисунок Б.12 – Виклики та перспективи, що постають перед такою архітектурою

 
Рисунок Б.13 – Підбиття підсумків
