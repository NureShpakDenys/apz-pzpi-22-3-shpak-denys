// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/admin/backup": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Backup the database in CSV format per table",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Backup the database",
                "parameters": [
                    {
                        "description": "Backup directory path",
                        "name": "BackupDatabaseRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.BackupDatabaseRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/admin/change-role": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update user role",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update user role",
                "parameters": [
                    {
                        "description": "UpdateUserRoleRequest",
                        "name": "UpdateUserRoleRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.UpdateUserRoleRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/admin/clear-logs": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Clear logs older than a specified number of days",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Clear logs",
                "parameters": [
                    {
                        "description": "ClearLogsRequest",
                        "name": "ClearLogsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.ClearLogsRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/admin/db-status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get database status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get database status",
                "responses": {}
            }
        },
        "/admin/health": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Health check endpoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Health check",
                "responses": {}
            }
        },
        "/admin/logs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get server logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get server logs",
                "responses": {}
            }
        },
        "/admin/optimize": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Optimize database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Optimize database",
                "responses": {}
            }
        },
        "/admin/restore": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Restore the database from encrypted backup files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Restore the database from backup",
                "parameters": [
                    {
                        "description": "Backup directory path",
                        "name": "RestoreDatabaseRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.RestoreDatabaseRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Database restored",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/admin/system-configs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get system configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Get system configs",
                "responses": {}
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update system configs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "Update system configs",
                "parameters": [
                    {
                        "description": "UpdateSystemConfigsRequest",
                        "name": "UpdateSystemConfigsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/admin.UpdateSystemConfigsRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/analytics/{delivery_id}/optimal-back-route": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the optimal back route for the given route ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Get optimal back route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "delivery_id",
                        "name": "delivery_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/analytics/{delivery_id}/optimal-route": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the optimal route for the given route ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Get optimal route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "delivery_id",
                        "name": "delivery_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthCredentials"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logs out a user by invalidating their token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Logout user",
                "responses": {}
            }
        },
        "/auth/register": {
            "post": {
                "description": "Registers a new user with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.AuthCredentials"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/company": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Registers a new company with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Register a new company",
                "parameters": [
                    {
                        "description": "Company details",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/company.CompanyRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/company/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all companies",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Get all companies",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dtos.CompanyDTO"
                            }
                        }
                    }
                }
            }
        },
        "/company/{company_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a company by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Get company details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the details of an existing company",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Update company details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated company details",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/company.CompanyRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a company by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Delete a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/company/{company_id}/add-user": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a user to a company if the request is made by the company creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Add a user to a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User ID to add",
                        "name": "userID",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/company.AddUserToCompanyRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/company/{company_id}/remove-user": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Removes a user from a company if the request is made by the company creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Remove a user from a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User ID to remove",
                        "name": "userID",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/company.RemoveUserFromCompanyRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/company/{company_id}/update-user": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates a user in a company if the request is made by the company creator",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Update a user in a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User ID to update",
                        "name": "userID",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/company.UpdateUserInCompanyRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/company/{company_id}/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get all users of a company by company ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "company"
                ],
                "summary": "Get all users of a company",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Company ID",
                        "name": "company_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/delivery": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a delivery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery"
                ],
                "summary": "Create a delivery",
                "parameters": [
                    {
                        "description": "CreateDeliveryRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateDeliveryRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/delivery/{delivery_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a delivery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery"
                ],
                "summary": "Get a delivery",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Delivery ID",
                        "name": "delivery_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a delivery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery"
                ],
                "summary": "Update a delivery",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Delivery ID",
                        "name": "delivery_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateDeliveryRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateDeliveryRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a delivery",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "delivery"
                ],
                "summary": "Delete a delivery",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Delivery ID",
                        "name": "delivery_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/device-config/{waypoint_id}": {
            "get": {
                "description": "Retrieves the configuration of a device",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waypoint"
                ],
                "summary": "Get device configuration",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Waypoint ID",
                        "name": "waypoint_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/products": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Create a product",
                "parameters": [
                    {
                        "description": "CreateProductRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateProductRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/products/{product_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UpdateProductRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateProductRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/routes": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new route with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "route"
                ],
                "summary": "Create a new route",
                "parameters": [
                    {
                        "description": "Route details",
                        "name": "route",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateRouteRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/routes/{route_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a route with the given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "route"
                ],
                "summary": "Get a route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "route_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing route with the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "route"
                ],
                "summary": "Update an existing route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "route_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated route details",
                        "name": "route",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateRouteRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a route with the given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "route"
                ],
                "summary": "Delete a route",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Route ID",
                        "name": "route_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/routes/{route_id}/get-sensor-data": {
            "get": {
                "description": "Retrieves the sensor data for the given route ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "routes"
                ],
                "summary": "Get sensor data",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "route_id",
                        "name": "route_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of hours to get data for",
                        "name": "for_hours",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/routes/{route_id}/weather-alert": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the weather alert for the given route ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Get weather alert",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "route_id",
                        "name": "route_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/sensor-data/": {
            "post": {
                "description": "Adds new sensor data to the specified SensorData",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "Add sensor data to a SensorData",
                "parameters": [
                    {
                        "description": "Sensor data details",
                        "name": "sensor_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateSensorDataRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/sensor-data/{sensor_data_id}": {
            "get": {
                "description": "Retrieves sensor data with the given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "Get sensor data by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sensor Data ID",
                        "name": "sensor_data_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "description": "Updates sensor data with the given ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "Update sensor data by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sensor Data ID",
                        "name": "sensor_data_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sensor data details",
                        "name": "sensor_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateSensorDataRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes sensor data with the given ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sensor"
                ],
                "summary": "Delete sensor data by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Sensor Data ID",
                        "name": "sensor_data_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get a user",
                "operationId": "get-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update a user",
                "operationId": "update-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateUserRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Delete a user",
                "operationId": "delete-user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get users",
                "operationId": "get-users",
                "responses": {}
            }
        },
        "/waypoints": {
            "get": {
                "description": "Retrieves all waypoints",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waypoint"
                ],
                "summary": "Get waypoints",
                "responses": {}
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Adds a new waypoint to the specified route",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waypoint"
                ],
                "summary": "Add a waypoint to a route",
                "parameters": [
                    {
                        "description": "Waypoint details",
                        "name": "waypoint",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateWaypointRequest"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/waypoints/{waypoint_id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the details of a waypoint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waypoint"
                ],
                "summary": "Get waypoint details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Waypoint ID",
                        "name": "waypoint_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the details of a waypoint",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waypoint"
                ],
                "summary": "Update waypoint details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Waypoint ID",
                        "name": "waypoint_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Waypoint details",
                        "name": "waypoint",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateWaypointRequest"
                        }
                    }
                ],
                "responses": {}
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a waypoint",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "waypoint"
                ],
                "summary": "Delete waypoint",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Waypoint ID",
                        "name": "waypoint_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "admin.BackupDatabaseRequest": {
            "type": "object",
            "properties": {
                "backup_path": {
                    "description": "Backup path is the path where the backup will be stored",
                    "type": "string"
                }
            }
        },
        "admin.ClearLogsRequest": {
            "type": "object",
            "properties": {
                "days": {
                    "type": "integer"
                }
            }
        },
        "admin.RestoreDatabaseRequest": {
            "type": "object",
            "properties": {
                "backup_path": {
                    "description": "Backup path is the path where the backup is stored",
                    "type": "string"
                }
            }
        },
        "admin.UpdateSystemConfigsRequest": {
            "type": "object",
            "properties": {
                "timeout_sec": {
                    "type": "integer"
                },
                "token_ttl": {
                    "type": "integer"
                }
            }
        },
        "admin.UpdateUserRoleRequest": {
            "type": "object",
            "properties": {
                "roleId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "company.AddUserToCompanyRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "description": "Role is the role of the user in the company",
                    "allOf": [
                        {
                            "$ref": "#/definitions/handlers.Role"
                        }
                    ],
                    "example": "user | admin | manager"
                },
                "userID": {
                    "description": "UserID is the ID of the user to add\nExample: 1",
                    "type": "integer"
                }
            }
        },
        "company.CompanyRequest": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the address of the company\nExample: 123 Main St",
                    "type": "string"
                },
                "name": {
                    "description": "Name is the name of the company\nExample: Wayra",
                    "type": "string"
                }
            }
        },
        "company.RemoveUserFromCompanyRequest": {
            "type": "object",
            "properties": {
                "userID": {
                    "description": "UserID is the ID of the user to remove\nExample: 1",
                    "type": "integer"
                }
            }
        },
        "company.UpdateUserInCompanyRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "description": "Role is the role of the user in the company",
                    "type": "string",
                    "example": "user | admin | manager"
                },
                "userID": {
                    "description": "UserID is the ID of the user to update\nExample: 1",
                    "type": "integer"
                }
            }
        },
        "dtos.CompanyDTO": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address is the address of the company.\nExample: \"Koningin Wilhelminaplein 13, 1062 HH Amsterdam\"",
                    "type": "string"
                },
                "creator": {
                    "description": "Creator is the user who created the company.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dtos.UserDTO"
                        }
                    ]
                },
                "deliveries": {
                    "description": "Deliveries is the list of deliveries that belong to the company.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.DeliveryDTO"
                    }
                },
                "id": {
                    "description": "ID is the unique identifier of the company.\nExample: 1",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the name of the company.\nExample: \"TechTeam\"",
                    "type": "string"
                },
                "routes": {
                    "description": "Routes is the list of routes that belong to the company.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.RouteDTO"
                    }
                },
                "users": {
                    "description": "Users is the list of users that belong to the company.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.UserDTO"
                    }
                }
            }
        },
        "dtos.DeliveryDTO": {
            "type": "object",
            "properties": {
                "company_id": {
                    "description": "CompanyID is the unique identifier of the company\nExample: 1",
                    "type": "integer"
                },
                "date": {
                    "description": "Date is the date of the delivery\nExample: 2021-01-01T00:00:00Z",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration is the duration of the delivery\nExample: 1h",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the delivery\nExample: 1",
                    "type": "integer"
                },
                "products": {
                    "description": "Products is the list of products of the delivery",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.ProductDTO"
                    }
                },
                "route_id": {
                    "description": "RouteID is the unique identifier of the route\nExample: 1",
                    "type": "integer"
                },
                "status": {
                    "description": "Status is the status of the delivery\nExample: completed",
                    "type": "string"
                }
            }
        },
        "dtos.ProductCategoryDTO": {
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description is the product category description\nExample: Food products",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the product category identifier\nExample: 1",
                    "type": "integer"
                },
                "is_perishable": {
                    "description": "IsPerishable is a flag that indicates if the product category is perishable\nExample: true",
                    "type": "boolean"
                },
                "max_humidity": {
                    "description": "MaxHumidity is the maximum humidity that the product category can be stored\nExample: 20",
                    "type": "number"
                },
                "max_temperature": {
                    "description": "MaxTemperature is the maximum temperature that the product category can be stored\nExample: 20",
                    "type": "number"
                },
                "min_humidity": {
                    "description": "MinHumidity is the minimum humidity that the product category can be stored\nExample: 10",
                    "type": "number"
                },
                "min_temperature": {
                    "description": "MinTemperature is the minimum temperature that the product category can be stored\nExample: 10",
                    "type": "number"
                },
                "name": {
                    "description": "Name is the product category name\nExample: Food",
                    "type": "string"
                }
            }
        },
        "dtos.ProductDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the unique identifier of the product\nExample: 1",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the name of the product\nExample: Beer",
                    "type": "string"
                },
                "product_category": {
                    "description": "ProductCategory is the category of the product",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dtos.ProductCategoryDTO"
                        }
                    ]
                },
                "weight": {
                    "description": "Description is the description of the product\nExample: A cold beer",
                    "type": "number"
                }
            }
        },
        "dtos.RouteDTO": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Details is the details of the route\nExample: Route 1 details",
                    "type": "string"
                },
                "id": {
                    "description": "ID is the unique identifier of the route\nExample: 1",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the name of the route\nExample: Route 1",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the route\nExample: normal temperature",
                    "type": "string"
                },
                "waypoints": {
                    "description": "Waypoints is a list of waypoints that the route has",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.WaypointDTO"
                    }
                }
            }
        },
        "dtos.SensorDataDTO": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Date is the date of the SensorData\nExample: 2021-01-01T00:00:00Z",
                    "type": "string"
                },
                "humidity": {
                    "description": "Humidity is the humidity of the SensorData\nExample: 0.5",
                    "type": "number"
                },
                "id": {
                    "description": "ID is the unique identifier of the SensorData\nExample: 1",
                    "type": "integer"
                },
                "mean_pressure": {
                    "description": "WindDirection is the wind direction of the SensorData\nExample: 0.5",
                    "type": "number"
                },
                "temperature": {
                    "description": "Temperature is the temperature of the SensorData\nExample: 25.5",
                    "type": "number"
                },
                "wind_speed": {
                    "description": "Rain is the rain of the SensorData\nExample: 0.5",
                    "type": "number"
                }
            }
        },
        "dtos.UserDTO": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the user identifier\nExample: 1",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the user name\nExample: John Doe",
                    "type": "string"
                },
                "password": {
                    "description": "Email is the user email\nExample: password123",
                    "type": "string"
                }
            }
        },
        "dtos.WaypointDTO": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Details is the details of the Waypoint\nExample: Waypoint requires diagnostics",
                    "type": "string"
                },
                "device_serial": {
                    "description": "DeviceSerial is the serial number of the device that sent the Waypoint\nExample: 123456",
                    "type": "string"
                },
                "get_weather_alerts": {
                    "description": "GetWeatherAlerts is a boolean that indicates if the company should get weather alerts\nExample: true",
                    "type": "boolean"
                },
                "id": {
                    "description": "ID is the unique identifier of the Waypoint\nExample: 1",
                    "type": "integer"
                },
                "latitude": {
                    "description": "Latitude is the latitude of the Waypoint\nExample: -12.045",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude is the longitude of the Waypoint\nExample: -77.0311",
                    "type": "number"
                },
                "name": {
                    "description": "Name is the name of the Waypoint\nExample: Waypoint 1",
                    "type": "string"
                },
                "send_data_frequency": {
                    "description": "SendDataFrequency is the frequency of the data sent by the device in minutes\nExample: 5",
                    "type": "integer"
                },
                "sensor_data": {
                    "description": "Altitude is the altitude of the Waypoint",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dtos.SensorDataDTO"
                    }
                },
                "status": {
                    "description": "Status is the status of the Waypoint\nExample: ok",
                    "type": "string"
                }
            }
        },
        "handlers.AuthCredentials": {
            "type": "object",
            "properties": {
                "password": {
                    "description": "Password is the password of the user\nExample: password123",
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "description": "Username is the name of the user\nExample: john_doe",
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "handlers.CreateDeliveryRequest": {
            "type": "object",
            "properties": {
                "company_id": {
                    "description": "CompanyID is the ID of the company\nexample: 1",
                    "type": "integer"
                },
                "date": {
                    "description": "Date is the date of the delivery\nexample: 2023-09-01",
                    "type": "string",
                    "example": "2023-09-01"
                }
            }
        },
        "handlers.CreateProductRequest": {
            "type": "object",
            "properties": {
                "deliveryID": {
                    "description": "DeliveryID is the ID of the delivery\nexample: 1",
                    "type": "integer"
                },
                "name": {
                    "description": "Name is the name of the product\nexample: Apple",
                    "type": "string"
                },
                "product_type": {
                    "description": "ProductType is the type of the product\nexample: Fruits",
                    "type": "string",
                    "example": "Fruits | Vegetables | Frozen Foods | Dairy Products | Meat"
                },
                "weight": {
                    "description": "Weight is the weight of the product\nexample: 0.5",
                    "type": "number"
                }
            }
        },
        "handlers.CreateRouteRequest": {
            "type": "object",
            "properties": {
                "company_id": {
                    "description": "ID of the company to which the route belongs\nexample: 1",
                    "type": "integer"
                },
                "name": {
                    "description": "Name of the route\nexample: Route 1",
                    "type": "string",
                    "example": "Route 1"
                }
            }
        },
        "handlers.CreateSensorDataRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Date is the date and time when the sensor data was recorded\nexample: 2021-09-01T12:00:00Z",
                    "type": "string",
                    "example": "2021-09-01T12:00:00Z"
                },
                "humidity": {
                    "description": "Humidity is the humidity recorded by the sensor\nexample: 50.0",
                    "type": "number",
                    "example": 50
                },
                "pressure": {
                    "description": "MeanPressure is the mean pressure recorded by the sensor\nexample: 1013.25",
                    "type": "number",
                    "example": 1013.25
                },
                "temperature": {
                    "description": "Temperature is the temperature recorded by the sensor\nexample: 25.5",
                    "type": "number",
                    "example": 25.5
                },
                "waypoint_id": {
                    "description": "WaypointID is the ID of the waypoint where the sensor data was recorded\nexample: 1",
                    "type": "integer"
                },
                "wind_speed": {
                    "description": "WindSpeed is the wind speed recorded by the sensor\nexample: 10.5",
                    "type": "number",
                    "example": 10.5
                }
            }
        },
        "handlers.CreateWaypointRequest": {
            "type": "object",
            "properties": {
                "device_serial": {
                    "description": "Device serial number\nExample: \"1234567890\"",
                    "type": "string"
                },
                "get_weather_alerts": {
                    "description": "GetWeatherAlerts of the waypoint\nExample: true",
                    "type": "boolean"
                },
                "latitude": {
                    "description": "Latitude of the waypoint\nExample: -12.04318",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude of the waypoint\nExample: -77.02824",
                    "type": "number"
                },
                "name": {
                    "description": "Name of the waypoint\nExample: \"Waypoint 1\"",
                    "type": "string"
                },
                "route_id": {
                    "description": "Route ID to which the waypoint belongs\nExample: 1",
                    "type": "integer"
                },
                "send_data_frequency": {
                    "description": "SendDataFrequency of the waypoint\nExample: 10",
                    "type": "integer"
                }
            }
        },
        "handlers.Role": {
            "type": "string",
            "enum": [
                "user",
                "admin",
                "manager",
                "db_admin",
                "system_admin"
            ],
            "x-enum-varnames": [
                "RoleUser",
                "RoleAdmin",
                "RoleManager",
                "RoleDBAdmin",
                "RoleSystemAdmin"
            ]
        },
        "handlers.UpdateDeliveryRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Date is the date of the delivery\nexample: 2024-08-01",
                    "type": "string",
                    "example": "2024-08-01"
                },
                "duration": {
                    "description": "The duration of the delivery\nexample: 2 hours 30 minutes",
                    "type": "string",
                    "example": "2 hours 30 minutes"
                },
                "status": {
                    "description": "Status is the status of the delivery\nexample: completed",
                    "type": "string",
                    "example": "completed"
                }
            }
        },
        "handlers.UpdateProductRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the product\nexample: Apple",
                    "type": "string"
                },
                "product_type": {
                    "description": "ProductType is the type of the product\nexample: Fruits",
                    "type": "string"
                },
                "weight": {
                    "description": "Weight is the weight of the product\nexample: 0.5",
                    "type": "number"
                }
            }
        },
        "handlers.UpdateRouteRequest": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Details of the route\nexample: Everything is fine",
                    "type": "string",
                    "example": "Everything is fine"
                },
                "name": {
                    "description": "Name of the route\nexample: Route 1",
                    "type": "string",
                    "example": "Route 1"
                },
                "status": {
                    "description": "Status of the route\nexample: Normal temperature",
                    "type": "string",
                    "example": "Normal temperature"
                }
            }
        },
        "handlers.UpdateSensorDataRequest": {
            "type": "object",
            "properties": {
                "date": {
                    "description": "Date is the date and time when the sensor data was recorded\nexample: 2021-09-01T12:00:00Z",
                    "type": "string",
                    "example": "2021-09-01T12:00:00Z"
                },
                "humidity": {
                    "description": "Humidity is the humidity recorded by the sensor\nexample: 50.0",
                    "type": "number",
                    "example": 50
                },
                "temperature": {
                    "description": "Temperature is the temperature recorded by the sensor\nexample: 25.5",
                    "type": "number",
                    "example": 25.5
                }
            }
        },
        "handlers.UpdateUserRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "description": "Name is the name of the user\nExample: John Doe",
                    "type": "string"
                }
            }
        },
        "handlers.UpdateWaypointRequest": {
            "type": "object",
            "properties": {
                "details": {
                    "description": "Details of the waypoint\nExample: \"Everything is fine\"",
                    "type": "string"
                },
                "device_serial": {
                    "description": "Device serial number\nExample: \"1234567890\"",
                    "type": "string"
                },
                "get_weather_alerts": {
                    "description": "GetWeatherAlerts of the waypoint\nExample: true",
                    "type": "boolean"
                },
                "latitude": {
                    "description": "Latitude of the waypoint\nExample: -12.04318",
                    "type": "number"
                },
                "longitude": {
                    "description": "Longitude of the waypoint\nExample: -77.02824",
                    "type": "number"
                },
                "name": {
                    "description": "Name of the waypoint\nExample: \"Waypoint 1\"",
                    "type": "string"
                },
                "send_data_frequency": {
                    "description": "SendDataFrequency of the waypoint\nExample: 10",
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the waypoint\nExample: \"ok\"",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Provide the Bearer token in the format: \"Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "API Specification",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
